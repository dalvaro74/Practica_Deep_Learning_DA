{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"cnn_regresion.ipyn","provenance":[],"collapsed_sections":["OQ4zN_j19Lkx"],"machine_shape":"hm","authorship_tag":"ABX9TyOA5wlh5VmfcLyGpxDZ6nML"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"a9NxVP_IAwdx","colab_type":"text"},"source":["# Resumen\n","En este colab crearemos una red convolucional que permita generar un modelo de regreesion para predecir el valor de los apartamentos de airbnb a partir de las fotos de dichos apartamentos.\n","\n","Para ello usaremos el dataset generado en el notebook descarga_imagenes(airbnb-images-clean.csv) que se encuentra disponible en el directorio data\n","\n","En este caso vamos a usar el codigo del script models.py extraido del ejemplo indicado por el profesor para la realizacion de la practica.\n","\n","https://www.pyimagesearch.com/2019/02/04/keras-multiple-inputs-and-mixed-data/\n","\n","Dicho código ha sido modificado para adaptarse a nuestras necesidades.\n","\n","Tambien se generara un fichero que contendra el array de imagenes generado en este notebook (data.npz) lo que nos ahorrara tener que vover a recorrer todas las imagenes para obtenerlo.\n","\n","Indicar que para poder generar el array que contenga todas las imagenes (12.000 aproximadamente) se necesitas un entorno de colab de tipo \"High Ram Runtime\" que te pasa de 12 GB de Ram a 25.\n","El problema es que este tipo de entornos de alta capacidad no siempre estan disponibles y estamos a expensas de la carga que tenga Google Colab para poder disponer de ellos.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"SlNB7nmcBxLZ","colab_type":"text"},"source":["# Montar directorio Drive en colab\n","En primer lugar vamos a montar el directorio de Drive para poder utilizar los ficheros de carga y para guardar de manera permanente otros ficheros de interes"]},{"cell_type":"code","metadata":{"id":"HoomifhK-6aQ","colab_type":"code","outputId":"823d1899-cc42-4d56-c849-a129c4d189c3","executionInfo":{"status":"ok","timestamp":1581003660076,"user_tz":-60,"elapsed":27271,"user":{"displayName":"DANIEL ALVARO PARICIO","photoUrl":"","userId":"03090964372750420749"}},"colab":{"base_uri":"https://localhost:8080/","height":124}},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Qyq0quiMCIE-","colab_type":"text"},"source":["Definimos una serie de constantes para establecer el path del proyecto dentro de nuestro Google Drive asi como el directorio donde se almacenaran las imagenes"]},{"cell_type":"code","metadata":{"id":"0dcoNh4f_VMy","colab_type":"code","colab":{}},"source":["from os.path import join\n","ROOT = \"/content/gdrive\"\n","PROJ = \"My Drive/Public/Practica_Deep_Learning_DA\" \n","PROJECT_PATH = join(ROOT, PROJ)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VZt3Rc1WCb4f","colab_type":"code","outputId":"0a744d8f-19ca-4eca-ab82-7fd2d429cbc3","executionInfo":{"status":"ok","timestamp":1581008995244,"user_tz":-60,"elapsed":2524,"user":{"displayName":"DANIEL ALVARO PARICIO","photoUrl":"","userId":"03090964372750420749"}},"colab":{"base_uri":"https://localhost:8080/","height":87}},"source":["#Coprobamos que nuestro Google Drive esta corectamente montado\n","!ls \"/content/gdrive/My Drive/Public/Practica_Deep_Learning_DA\""],"execution_count":0,"outputs":[{"output_type":"stream","text":["cnn_regresion.ipyn\t    images\t\t   practica_dl.ipynb\n","data\t\t\t    mixed_regresion.ipynb  README.md\n","descarga_imagenes.ipyn\t    nn_regresion_01.ipynb  util\n","Explicacion_Practica.ipynb  nn_regresion_02.ipynb\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Rg4K2F2Na0lZ","colab_type":"text"},"source":["# Librerías y funciones"]},{"cell_type":"markdown","metadata":{"id":"acLtJT29bOKf","colab_type":"text"},"source":["## Definimos los Imports"]},{"cell_type":"code","metadata":{"id":"R8UhBx1e_YQE","colab_type":"code","outputId":"28fee733-e751-4550-d576-e5de1f17495a","executionInfo":{"status":"ok","timestamp":1581009003178,"user_tz":-60,"elapsed":6438,"user":{"displayName":"DANIEL ALVARO PARICIO","photoUrl":"","userId":"03090964372750420749"}},"colab":{"base_uri":"https://localhost:8080/","height":81}},"source":["import numpy as np\n","import pandas as pd\n","import urllib.request\n","\n","#Para incluir en Colab las funciones del package utilidades creado por mi\n","from importlib.machinery import SourceFileLoader\n","import sys\n","\n","missing_values_table = SourceFileLoader('missing_values_table', join(PROJECT_PATH, 'util/utilidades.py')).load_module()\n","change_cat_to_other = SourceFileLoader('change_cat_to_other', join(PROJECT_PATH, 'util/utilidades.py')).load_module()\n","create_nn = SourceFileLoader('create_nn', join(PROJECT_PATH, 'util/models.py')).load_module()\n","create_cnn = SourceFileLoader('create_cnn', join(PROJECT_PATH, 'util/models.py')).load_module()\n","\n","\n","sys.path.append('/content/gdrive/My\\ Drive/Public/Practica_Deep_Learning_DA/util')\n","from missing_values_table import missing_values_table\n","from change_cat_to_other import change_cat_to_other\n","from create_nn import create_nn\n","from create_cnn import create_cnn\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["<p style=\"color: red;\">\n","The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br>\n","We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now \n","or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n","<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"QC2Y_RotWZuo","colab_type":"text"},"source":["# Carga del Fichero con imagenes y pequeña limpieza\n","Cargamos el dataset que ya contiene las imagenes limpias"]},{"cell_type":"code","metadata":{"id":"cjLGIbF7WjAN","colab_type":"code","colab":{}},"source":["full_airbnb_images = pd.read_csv(join(PROJECT_PATH,'data/airbnb-images-clean.csv'),sep=';', decimal='.')\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Yly8e3HGai37","colab_type":"text"},"source":["## Outliers"]},{"cell_type":"code","metadata":{"id":"LOjoH5_cahsN","colab_type":"code","colab":{}},"source":["full_airbnb_images = full_airbnb_images[(full_airbnb_images['Price']>10) & (full_airbnb_images['Price']<200)]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6Qu9Sldyc2Gb","colab_type":"code","outputId":"7b897ae5-21af-4eaa-ad7b-c544b5fac449","executionInfo":{"status":"ok","timestamp":1581009021635,"user_tz":-60,"elapsed":560,"user":{"displayName":"DANIEL ALVARO PARICIO","photoUrl":"","userId":"03090964372750420749"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["full_airbnb_images.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(11476, 90)"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"nwIo4vRoar2r","colab_type":"text"},"source":["## NaNs de Price"]},{"cell_type":"code","metadata":{"id":"VArP-lNwa3iz","colab_type":"code","outputId":"0da203cf-5cc7-4859-df31-0fb62b64274f","executionInfo":{"status":"ok","timestamp":1581009031201,"user_tz":-60,"elapsed":608,"user":{"displayName":"DANIEL ALVARO PARICIO","photoUrl":"","userId":"03090964372750420749"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["print(full_airbnb_images['Price'].isna().sum())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"l8azh0ZibNmB","colab_type":"code","colab":{}},"source":["#full_airbnb_images.dropna(subset=['Price'], inplace=True)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bqH3AgnZpdBy","colab_type":"text"},"source":["# Generación de los tensores que representaran las distintas imagenes\n","\n","Para hacer esta parte nos hemos apoyado en el codigo recomendado por el profesor:\n","https://hjweide.github.io/efficient-image-loading\n","\n","Modificaciones del codigo:\n","- sustituir \"cv2.CV_LOAD_IMAGE_COLOR\" por \"cv2.IMREAD_COLOR\" ya que la version de OpenCV del ejemplo es la 2 y actualmente ya vamos por la 4.\n","- Cambiamos la dimension de array donde se guardaran las imagenes de (N, 3, 144, 216) a (N, 144, 216, 3) ya que Tensorflow y por extension Keras son \"Channel Last order\""]},{"cell_type":"markdown","metadata":{"id":"mI6P4GAj80hj","colab_type":"text"},"source":["## Generacion desde las imagenes"]},{"cell_type":"code","metadata":{"id":"Zy2pfCQ50wJu","colab_type":"code","outputId":"83ac6341-23ed-45fc-f281-74e1d39a1f87","executionInfo":{"status":"ok","timestamp":1581009109253,"user_tz":-60,"elapsed":72907,"user":{"displayName":"DANIEL ALVARO PARICIO","photoUrl":"","userId":"03090964372750420749"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import cv2\n","from time import time\n","array_images = full_airbnb_images['image_path'].values\n","N = len(array_images)\n","# Esto esta mal considerando que TensorFlow es por defecto \"Channel Last\" y que por tanto Keras( que usa Tensorflow por defecto) tambien lo será\n","#data = np.empty((N, 3, 144, 216), dtype=np.uint8)\n","data = np.empty((N, 144, 216, 3), dtype=np.uint8) # Y asi no deberiamos necesitar transponer\n","start_time = time()\n","# Debemos tener en cuenta que imread devuelve (alto, ancho, chanels)\n","for i, fpath in enumerate(array_images):\n","  if i%100 == 0:\n","    print('LLevamos {} Registros tratados'.format(i))\n","  img = cv2.imread(fpath, cv2.IMREAD_COLOR)\n","  #data[i, ...] = img.transpose(2, 0, 1)\n","  # Ya no es necesario trasponer\n","  data[i, ...] = img\n","\n","elapsed_time = time() - start_time\n","print(\"Elapsed time: %0.10f seconds.\" % elapsed_time)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["LLevamos 0 Registros tratados\n","LLevamos 100 Registros tratados\n","LLevamos 200 Registros tratados\n","LLevamos 300 Registros tratados\n","LLevamos 400 Registros tratados\n","LLevamos 500 Registros tratados\n","LLevamos 600 Registros tratados\n","LLevamos 700 Registros tratados\n","LLevamos 800 Registros tratados\n","LLevamos 900 Registros tratados\n","LLevamos 1000 Registros tratados\n","LLevamos 1100 Registros tratados\n","LLevamos 1200 Registros tratados\n","LLevamos 1300 Registros tratados\n","LLevamos 1400 Registros tratados\n","LLevamos 1500 Registros tratados\n","LLevamos 1600 Registros tratados\n","LLevamos 1700 Registros tratados\n","LLevamos 1800 Registros tratados\n","LLevamos 1900 Registros tratados\n","LLevamos 2000 Registros tratados\n","LLevamos 2100 Registros tratados\n","LLevamos 2200 Registros tratados\n","LLevamos 2300 Registros tratados\n","LLevamos 2400 Registros tratados\n","LLevamos 2500 Registros tratados\n","LLevamos 2600 Registros tratados\n","LLevamos 2700 Registros tratados\n","LLevamos 2800 Registros tratados\n","LLevamos 2900 Registros tratados\n","LLevamos 3000 Registros tratados\n","LLevamos 3100 Registros tratados\n","LLevamos 3200 Registros tratados\n","LLevamos 3300 Registros tratados\n","LLevamos 3400 Registros tratados\n","LLevamos 3500 Registros tratados\n","LLevamos 3600 Registros tratados\n","LLevamos 3700 Registros tratados\n","LLevamos 3800 Registros tratados\n","LLevamos 3900 Registros tratados\n","LLevamos 4000 Registros tratados\n","LLevamos 4100 Registros tratados\n","LLevamos 4200 Registros tratados\n","LLevamos 4300 Registros tratados\n","LLevamos 4400 Registros tratados\n","LLevamos 4500 Registros tratados\n","LLevamos 4600 Registros tratados\n","LLevamos 4700 Registros tratados\n","LLevamos 4800 Registros tratados\n","LLevamos 4900 Registros tratados\n","LLevamos 5000 Registros tratados\n","LLevamos 5100 Registros tratados\n","LLevamos 5200 Registros tratados\n","LLevamos 5300 Registros tratados\n","LLevamos 5400 Registros tratados\n","LLevamos 5500 Registros tratados\n","LLevamos 5600 Registros tratados\n","LLevamos 5700 Registros tratados\n","LLevamos 5800 Registros tratados\n","LLevamos 5900 Registros tratados\n","LLevamos 6000 Registros tratados\n","LLevamos 6100 Registros tratados\n","LLevamos 6200 Registros tratados\n","LLevamos 6300 Registros tratados\n","LLevamos 6400 Registros tratados\n","LLevamos 6500 Registros tratados\n","LLevamos 6600 Registros tratados\n","LLevamos 6700 Registros tratados\n","LLevamos 6800 Registros tratados\n","LLevamos 6900 Registros tratados\n","LLevamos 7000 Registros tratados\n","LLevamos 7100 Registros tratados\n","LLevamos 7200 Registros tratados\n","LLevamos 7300 Registros tratados\n","LLevamos 7400 Registros tratados\n","LLevamos 7500 Registros tratados\n","LLevamos 7600 Registros tratados\n","LLevamos 7700 Registros tratados\n","LLevamos 7800 Registros tratados\n","LLevamos 7900 Registros tratados\n","LLevamos 8000 Registros tratados\n","LLevamos 8100 Registros tratados\n","LLevamos 8200 Registros tratados\n","LLevamos 8300 Registros tratados\n","LLevamos 8400 Registros tratados\n","LLevamos 8500 Registros tratados\n","LLevamos 8600 Registros tratados\n","LLevamos 8700 Registros tratados\n","LLevamos 8800 Registros tratados\n","LLevamos 8900 Registros tratados\n","LLevamos 9000 Registros tratados\n","LLevamos 9100 Registros tratados\n","LLevamos 9200 Registros tratados\n","LLevamos 9300 Registros tratados\n","LLevamos 9400 Registros tratados\n","LLevamos 9500 Registros tratados\n","LLevamos 9600 Registros tratados\n","LLevamos 9700 Registros tratados\n","LLevamos 9800 Registros tratados\n","LLevamos 9900 Registros tratados\n","LLevamos 10000 Registros tratados\n","LLevamos 10100 Registros tratados\n","LLevamos 10200 Registros tratados\n","LLevamos 10300 Registros tratados\n","LLevamos 10400 Registros tratados\n","LLevamos 10500 Registros tratados\n","LLevamos 10600 Registros tratados\n","LLevamos 10700 Registros tratados\n","LLevamos 10800 Registros tratados\n","LLevamos 10900 Registros tratados\n","LLevamos 11000 Registros tratados\n","LLevamos 11100 Registros tratados\n","LLevamos 11200 Registros tratados\n","LLevamos 11300 Registros tratados\n","LLevamos 11400 Registros tratados\n","Elapsed time: 71.8930561543 seconds.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CA4EikQAEVC6","colab_type":"code","outputId":"75446468-544e-4854-f7cc-c55792dc89cf","executionInfo":{"status":"ok","timestamp":1581009114013,"user_tz":-60,"elapsed":528,"user":{"displayName":"DANIEL ALVARO PARICIO","photoUrl":"","userId":"03090964372750420749"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["data.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(11476, 144, 216, 3)"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"HTa4pYGC0uSd","colab_type":"text"},"source":["## Convertimos el array que representa las imagenes en un fichero\n","Para evitar tener que generar el array cada vez que ejecutemos este notebook, lo almacenamos en un fichero comprimido npz  dentro del directorio data"]},{"cell_type":"code","metadata":{"id":"2FYWqScHH65K","colab_type":"code","colab":{}},"source":["from numpy import savez_compressed\n","\n","savez_compressed(join(PROJECT_PATH,'data/data.npz'), data)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OQ4zN_j19Lkx","colab_type":"text"},"source":["## Obtenemos el array de imagenes desde el fichero data.npz"]},{"cell_type":"code","metadata":{"id":"c70Ek5Hg9pL9","colab_type":"code","colab":{}},"source":["from numpy import load\n","dict_data = load(join(PROJECT_PATH,'data/data.npz'))\n","# extract the first array\n","data = dict_data['arr_0']"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FEYR_aeoEz7B","colab_type":"text"},"source":["# Red Convolucional"]},{"cell_type":"markdown","metadata":{"id":"V_QxPGGx1eto","colab_type":"text"},"source":["Creamos las red convolucional usando la funcion create_cnn de la libreria models.py"]},{"cell_type":"code","metadata":{"id":"YHoPF6QZy-RU","colab_type":"code","colab":{}},"source":["from keras.optimizers import Adam\n","from sklearn.model_selection import train_test_split\n","\n","# En primer lugar normalizamos los pixeles de las imagenes al rango [0,1]\n","data = data/255.0\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"doa8sYGm2nm8","colab_type":"code","colab":{}},"source":["# Dividimos las imagenes y el dataset (para obtener el target de la CNN, es decir el precio)\n","(trainAttrX, testAttrX, trainImagesX, testImagesX) = train_test_split(full_airbnb_images, data, test_size=0.25, random_state=55)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rdSyP39b3eUz","colab_type":"code","colab":{}},"source":["# Normalizamos los precios de las casas a [0,1] usando el maximo de los precios del conjunto de train\n","maxPrice = trainAttrX[\"Price\"].max()\n","trainY = trainAttrX[\"Price\"] / maxPrice\n","testY = testAttrX[\"Price\"] / maxPrice"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-FQTxc41ZwaX","colab_type":"code","outputId":"9330d23a-492f-45fd-ce96-290feae6845c","executionInfo":{"status":"ok","timestamp":1581009162988,"user_tz":-60,"elapsed":1084,"user":{"displayName":"DANIEL ALVARO PARICIO","photoUrl":"","userId":"03090964372750420749"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["maxPrice"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["199.0"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"rgz2ca-C30rC","colab_type":"code","outputId":"518b9b1a-5c9c-48a3-8865-52e3444f62b4","executionInfo":{"status":"ok","timestamp":1581009189469,"user_tz":-60,"elapsed":8959,"user":{"displayName":"DANIEL ALVARO PARICIO","photoUrl":"","userId":"03090964372750420749"}},"colab":{"base_uri":"https://localhost:8080/","height":540}},"source":["# Creamos nuestra red convolucional\n","# Inicialmente usaremos la misma arquitectura que en el codigo de ejemplo\n","# Como funcion de perdidas (o funcion de coste) usaremos directamente el \"mean_absolute_percentage_error\" que nos dara de manera inmediata una idea de la bondad del modelo\n","model = create_cnn(216, 144, 3, regress=True)\n","opt = Adam(lr=0.001, decay=1e-3)\n","model.compile(loss=\"mean_absolute_percentage_error\", optimizer=opt)\n","#model.compile(loss=\"mean_squared_error\", optimizer=opt)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:197: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:203: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:207: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:216: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:223: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:2041: The name tf.nn.fused_batch_norm is deprecated. Please use tf.compat.v1.nn.fused_batch_norm instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:148: The name tf.placeholder_with_default is deprecated. Please use tf.compat.v1.placeholder_with_default instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4267: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3733: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZRCV61au45q8","colab_type":"code","outputId":"b5ba1e6f-2adb-4547-816d-ebbe7c3cf1d1","executionInfo":{"status":"ok","timestamp":1581010186812,"user_tz":-60,"elapsed":976176,"user":{"displayName":"DANIEL ALVARO PARICIO","photoUrl":"","userId":"03090964372750420749"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# Entrenamos el modelo\n","model.fit(trainImagesX, trainY, validation_data=(testImagesX, testY),epochs=100, batch_size=64)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1020: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.\n","\n","Train on 8607 samples, validate on 2869 samples\n","Epoch 1/100\n","8607/8607 [==============================] - 17s 2ms/step - loss: 142.3050 - val_loss: 59.1877\n","Epoch 2/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 60.3300 - val_loss: 46.3872\n","Epoch 3/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 48.7806 - val_loss: 46.7525\n","Epoch 4/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 46.4186 - val_loss: 43.8787\n","Epoch 5/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 45.3265 - val_loss: 47.1488\n","Epoch 6/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 45.1179 - val_loss: 43.6781\n","Epoch 7/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 44.5982 - val_loss: 45.4684\n","Epoch 8/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 44.1743 - val_loss: 43.4895\n","Epoch 9/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 43.7705 - val_loss: 44.3708\n","Epoch 10/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 43.5876 - val_loss: 43.1416\n","Epoch 11/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 42.6368 - val_loss: 43.8704\n","Epoch 12/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 42.3134 - val_loss: 43.6490\n","Epoch 13/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 41.7859 - val_loss: 43.7687\n","Epoch 14/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 41.6329 - val_loss: 43.0073\n","Epoch 15/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 40.9067 - val_loss: 42.9579\n","Epoch 16/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 40.4901 - val_loss: 43.1497\n","Epoch 17/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 39.9874 - val_loss: 42.3286\n","Epoch 18/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 39.6761 - val_loss: 42.7021\n","Epoch 19/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 39.1930 - val_loss: 43.4231\n","Epoch 20/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 38.2047 - val_loss: 42.8782\n","Epoch 21/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 37.5381 - val_loss: 42.3384\n","Epoch 22/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 37.0349 - val_loss: 44.5058\n","Epoch 23/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 36.5201 - val_loss: 43.2183\n","Epoch 24/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 35.3023 - val_loss: 42.9938\n","Epoch 25/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 35.0959 - val_loss: 42.3048\n","Epoch 26/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 34.6128 - val_loss: 42.8577\n","Epoch 27/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 34.2554 - val_loss: 42.9547\n","Epoch 28/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 33.3634 - val_loss: 42.9880\n","Epoch 29/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 32.7713 - val_loss: 45.2847\n","Epoch 30/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 33.2468 - val_loss: 42.6332\n","Epoch 31/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 32.2256 - val_loss: 43.9063\n","Epoch 32/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 31.4160 - val_loss: 43.0154\n","Epoch 33/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 30.9918 - val_loss: 44.3846\n","Epoch 34/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 30.7132 - val_loss: 43.9259\n","Epoch 35/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 30.5339 - val_loss: 44.3756\n","Epoch 36/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 29.9718 - val_loss: 49.8904\n","Epoch 37/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 30.1560 - val_loss: 44.1082\n","Epoch 38/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 29.5213 - val_loss: 43.7626\n","Epoch 39/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 29.4792 - val_loss: 46.1392\n","Epoch 40/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 28.9166 - val_loss: 45.1410\n","Epoch 41/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 28.4745 - val_loss: 44.8635\n","Epoch 42/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 28.5335 - val_loss: 45.1211\n","Epoch 43/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 28.3135 - val_loss: 45.9058\n","Epoch 44/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 28.4630 - val_loss: 44.6830\n","Epoch 45/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 27.8995 - val_loss: 44.6614\n","Epoch 46/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 27.8497 - val_loss: 43.6656\n","Epoch 47/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 27.3664 - val_loss: 46.0203\n","Epoch 48/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 26.8163 - val_loss: 44.4593\n","Epoch 49/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 26.8784 - val_loss: 44.6730\n","Epoch 50/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 26.7813 - val_loss: 45.1823\n","Epoch 51/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 26.3554 - val_loss: 49.4680\n","Epoch 52/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 26.4824 - val_loss: 44.8766\n","Epoch 53/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 26.2561 - val_loss: 45.5569\n","Epoch 54/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 26.0549 - val_loss: 49.7162\n","Epoch 55/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 25.9103 - val_loss: 44.9708\n","Epoch 56/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 26.0123 - val_loss: 45.5066\n","Epoch 57/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 25.6785 - val_loss: 45.9034\n","Epoch 58/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 25.0949 - val_loss: 45.6483\n","Epoch 59/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 25.5453 - val_loss: 45.8353\n","Epoch 60/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 25.3303 - val_loss: 47.7793\n","Epoch 61/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 25.0476 - val_loss: 46.9647\n","Epoch 62/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 25.0601 - val_loss: 47.9298\n","Epoch 63/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 24.6132 - val_loss: 46.2730\n","Epoch 64/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 24.8565 - val_loss: 46.0138\n","Epoch 65/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 24.7323 - val_loss: 46.3161\n","Epoch 66/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 24.6597 - val_loss: 47.1859\n","Epoch 67/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 24.3746 - val_loss: 47.6912\n","Epoch 68/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 24.2476 - val_loss: 46.8922\n","Epoch 69/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 23.8756 - val_loss: 46.1457\n","Epoch 70/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 24.0574 - val_loss: 47.3168\n","Epoch 71/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 24.2812 - val_loss: 46.6097\n","Epoch 72/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 23.5759 - val_loss: 50.8244\n","Epoch 73/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 23.9779 - val_loss: 48.0702\n","Epoch 74/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 23.9881 - val_loss: 46.6423\n","Epoch 75/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 23.5424 - val_loss: 48.1790\n","Epoch 76/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 23.5701 - val_loss: 46.0508\n","Epoch 77/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 23.1988 - val_loss: 45.6067\n","Epoch 78/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 23.3172 - val_loss: 46.7813\n","Epoch 79/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 23.4125 - val_loss: 49.8745\n","Epoch 80/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 23.3170 - val_loss: 46.4781\n","Epoch 81/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 23.1663 - val_loss: 45.4011\n","Epoch 82/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.9906 - val_loss: 46.9678\n","Epoch 83/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.9697 - val_loss: 47.0841\n","Epoch 84/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 23.2539 - val_loss: 48.1031\n","Epoch 85/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 23.1106 - val_loss: 45.5489\n","Epoch 86/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.9258 - val_loss: 51.4418\n","Epoch 87/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.6156 - val_loss: 47.7917\n","Epoch 88/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.9428 - val_loss: 47.7418\n","Epoch 89/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.5918 - val_loss: 50.6211\n","Epoch 90/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.7301 - val_loss: 47.8342\n","Epoch 91/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.5178 - val_loss: 49.7082\n","Epoch 92/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.6110 - val_loss: 47.8656\n","Epoch 93/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.1186 - val_loss: 46.5997\n","Epoch 94/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.6100 - val_loss: 48.7518\n","Epoch 95/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.3067 - val_loss: 47.8124\n","Epoch 96/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.3412 - val_loss: 47.8752\n","Epoch 97/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.1180 - val_loss: 47.9916\n","Epoch 98/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 22.1693 - val_loss: 50.2909\n","Epoch 99/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 21.9898 - val_loss: 48.8182\n","Epoch 100/100\n","8607/8607 [==============================] - 10s 1ms/step - loss: 21.9761 - val_loss: 49.0739\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f1d40291fd0>"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"9ygrf0somnTQ","colab_type":"text"},"source":["**¡¡¡¡ DEMASIADO OVERFITTING!!!!**"]},{"cell_type":"markdown","metadata":{"id":"tZt6d3cxlpxO","colab_type":"text"},"source":["# Bondad del modelo"]},{"cell_type":"code","metadata":{"id":"2TYkvXeD5Zys","colab_type":"code","outputId":"2052c179-f263-45c0-aced-52e97e763e0b","executionInfo":{"status":"ok","timestamp":1581010959085,"user_tz":-60,"elapsed":2346,"user":{"displayName":"DANIEL ALVARO PARICIO","photoUrl":"","userId":"03090964372750420749"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["# Obtenemos la prediccion de nuestro modelo para los datos de Test\n","preds = model.predict(testImagesX)\n"," \n","\n","# Calulamos la diferencia entre los precios predichos y los reales\n","# A continuacion calcularemos la diferencia porcentual y la diferecia absouta en porcentaje\n","diff = preds.flatten() - testY\n","percentDiff = (diff / testY) * 100\n","absPercentDiff = np.abs(percentDiff)\n"," \n","\n","#Calculamos la media y la desviacion estandar\n","mean = np.mean(absPercentDiff)\n","std = np.std(absPercentDiff)\n"," \n","# Mostramos las estadisticas de nuestro modelo.\n","print(\"Precio medio de las pisos: {:.2f}€, Desviacion standar: {:.2f}€\".format(\n","    full_airbnb_images[\"Price\"].mean(), full_airbnb_images[\"Price\"].std()))\n","print(\"Modelo --> mean: {:.2f}%, std: {:.2f}%\".format(mean, std))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Precio medio de las pisos: 58.79€, Desviacion standar: 36.34€\n","Modelo --> mean: 49.07%, std: 52.55%\n"],"name":"stdout"}]}]}